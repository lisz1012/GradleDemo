plugins {
    id 'java'
}

group 'com.lisz'
version '1.0-SNAPSHOT'

repositories {  // 省略了project.  {}里面是一个闭包参数。 通过project.可以隐式调用
    // 从中央仓库下载到本地目录：/Users/shuzheng/.gradle/caches/modules-2/files-2.1
    // 但是我们习惯使用maven的本地仓库
    mavenLocal()  // 先从maven本地仓库找，没有再从中央仓库下载。需要设置maven本地仓库:/Users/shuzheng/.m2/repository
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    // https://mvnrepository.com/artifact/org.mybatis/mybatis
    implementation group: 'org.mybatis', name: 'mybatis', version: '3.5.11'
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile){
    options.encoding = 'UTF-8'
}

// 自定义任务
task (t1, {        // task是方法，t1跟闭包是参数，默认去右边的other分组中找这个task，用group函数改变分组
    group "mytask"
    // 配置代码
    println("我是任务1")
    // 动作代码，等各个task的配置代码都执行完了才会执行
    doFirst {
        println("在任务t1执行之前的操作代码")
    }
    doLast {
        println "在任务t1执行之后的操作代码"
    }
})

task t2{        // task是方法，t2跟闭包是参数,默认去右边的other分组中找这个task，用group函数改变分组
    group "mytask"
    // 配置代码
    println("我是任务2")
    // 动作代码，等各个task的配置代码都执行完了才会执行
    doFirst {
        println("在任务t2执行之前的操作代码")
    }
    doLast {
        println "在任务t2执行之后的操作代码"
    }
}

// 定义方式3
tasks.create('t3'){
    group('mytask')
    println("我是任务3")
}

tasks.register('t4') {  // 通过register定义的任务在build阶段的配置过程中不执行，在右边点击该task的时候会执行，配置代码执行的晚
    group('mytask')
    println("我是任务4")
}

tasks{
    task t5{
        group('mytask')
        println('我是任务5')
    }
}

// 可以一次性定义多个任务: 动态定义
3.times{ index ->
    task("task${index}"){
        group('mytask')
        println("task${index}")
    }
}

//任务依赖
task a {
    group('mytask')
    doFirst {
        println "我是任务a"
    }
}

task b(dependsOn:a) {  // 依赖方式通过参数传递
    group('mytask')
    doFirst {
        println "我是任务b"
    }
}

task c {
    group('mytask')
    dependsOn 'b'    // 依赖通过内部设置
    doFirst {
        println "我是任务c"
    }
}

task d {
    group('mytask')
    doFirst {
        println "我是任务d"
    }
}
d.dependsOn c     // 外部设置依赖

// 对内置任务clean进行扩展
clean.doLast{
    println("After clean")
}
tasks.named("clean").get().doFirst {
    println("Before clean")
}